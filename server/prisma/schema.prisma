// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  articles Article[]
  comments Comment[]
  profile  Profile?

  @@map("users")
}

model Profile {
  id          Int     @id @default(autoincrement())
  avatarUrl   String?
  firstname   String?
  lastname    String?
  bio         String?
  socialLinks SocialLink[] 

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  @@map("profiles")
}

model SocialLink {
  id       Int    @id @default(autoincrement())
  name     String
  url      String
  profile  Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId Int @map("profile_id")

  @@map("social_links")
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  isPublished Boolean @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comments   Comment[]
  tags       Tag[]

  author   User @relation(fields: [authorId], references: [id])
  authorId Int @map("author_id")

  @@map("articles")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  articleId Int @map("article_id")

  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId Int @map("author_id")

  @@map("comments")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  articles Article[]

  @@map("tags")
}

enum Role { 
  USER
  ADMIN
}
